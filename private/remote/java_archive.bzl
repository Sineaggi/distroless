BUILD_TMPL = """\
# GENERATED BY java_archive.bzl
load("@distroless//private/pkg:dpkg_status.bzl", "dpkg_status")
load("@distroless//private/pkg:debian_spdx.bzl", "debian_spdx")
load("@distroless//private/util:merge_providers.bzl", "merge_providers")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

pkg_tar(
    name = "data",
    srcs = glob(
        ["output/**/*"],
        exclude = [
        ],
    ),
    package_dir = "/java",
    strip_prefix = "external/{name}/output"
)

pkg_tar(
    name = "_control",
    srcs = ["control"]
)

dpkg_status(
    name = "dpkg",
    control = ":_control.tar",
    package_name = "{package_name}"
)

pkg_tar(
    name = "data_with_dpkg_status",
    deps = [
        ":data",
        ":dpkg"
    ]
)

debian_spdx(
    name = "spdx",
    control = ":_control.tar",
    data = ":data.tar",
    package_name = "{package_name}",
    spdx_id = "{spdx_id}",
    sha256 = "{sha256}",
    urls = [{urls}]
)

merge_providers(
    name = "{name}",
    srcs = [":data_with_dpkg_status", ":spdx"],
    visibility = ["//visibility:public"],
)
"""

def _impl(rctx):
    source_java_path = "/".join(str(rctx.path(Label(rctx.attr.source_jdk))).split("/")[:-1] + ["bin"])
    res = rctx.execute(
        [
            source_java_path + "/java",
            "--list-modules",
        ],
    )
    if res.return_code != 0:
        fail("Failed list java modules. stdout=\"" + res.stdout + "\", stderr=\"" + res.stderr + "\"")
    modules = [x.split("@")[0] for x in res.stdout.split("\n") if x and x not in rctx.attr.excluded_modules]
    target_java_path = "/".join(str(rctx.path(Label(rctx.attr.target_jdk))).split("/")[:-1])
    res = rctx.execute(
        [
            source_java_path + "/jlink",
            "--add-modules",
            ",".join(modules),
            "--module-path",
            rctx.path(target_java_path).get_child("jmods"),
            "--compress=" + rctx.attr.compress,
            "--no-header-files",
            "--no-man-pages",
            "--output",
            "output",
        ],
        quiet = False,
    )
    if res.return_code != 0:
        fail("Error: Failed to run jlink\n" + res.stdout)
    rctx.template(
        "control",
        rctx.attr.control,
        substitutions = {
            "{{VERSION}}": rctx.attr.version,
            "{{ARCHITECTURE}}": rctx.attr.architecture,
        },
    )
    rctx.file(
        "BUILD.bazel",
        content = BUILD_TMPL.format(
            name = rctx.attr.name,
            package_name = rctx.attr.package_name,
            spdx_id = rctx.attr.name,
            urls = ",".join(['"%s"' % url for url in rctx.attr.urls]),
            sha256 = rctx.attr.sha256,
        ),
    )

java_archive = repository_rule(
    implementation = _impl,
    attrs = {
        "urls": attr.string_list(mandatory = True),
        "sha256": attr.string(mandatory = True),
        "type": attr.string(default = ".tar.gz"),
        "package_name": attr.string(default = "java"),
        "version": attr.string(mandatory = True),
        "architecture": attr.string(mandatory = True),
        "control": attr.label(),
        "source_jdk": attr.string(),
        "target_jdk": attr.string(),
        "compress": attr.string(default = "zip-6"),
        "excluded_modules": attr.string_list(default = []),
    },
)
